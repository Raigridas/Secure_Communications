# Code taken from RSA.py file, on moodle.itb.ie page

import binascii

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16) #converting the string to integer

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8") #converting the integer back to the string

#given e,p and q, need to find n and d (values of n and d were found by using the formulas in this code)
n = 24855295617417761308182544123442273533423646777158111921820308555018731822663342681417676464202155348304554917412381962336651413970644568523679587435514032422328596264934574097114274189020829101427275754772956726085346686266276169112829900643653610862546339825862167179882595979823626795106535212170251689288872955331932707131660803308892447835727600696244125283612356647642681557935597927329296193586895438576208797120677696084367074983194444334811365968159745575156434067747879587091751623729313624994230952088411981107529106445642502982381313862742552264135146825191482895355388406674861189009757937463530417321573
e = 65537
d = 6699176675558346212791804009894934459837882366780915955674411863769334557815055390459768330312142332918071594079257747268178442351304845482739158528173701400857718913343673296785427152217280700178699039203953608031670107972710106523170535193394531063002861691625025879509989401217702118021298472431989957422419067266170670363427169874645093319953001193061421540387459398078966725867536146397382197648487116968632465973807505874098452543335022929370501301387613963425352942258404384696193418040333854221326730776639299160353369430938319937222926836683240344678609517617879118184840113057948810172337565546315212750849
p = 163598797232837275790583032413921422452851861145478369331976309880028992955089558380171554447759405365296693377570783300198791468861355639873166150884714034914366548252757855530548966926710596087588892893653952147784119788340592861717511574050564549916735627066568966135368285851889401719649796310308064172229
q = 151928351783926490385254692544226090032004315756120674902384041799040568083955129227360764179393042678005292005933989750269377019057534023167675372696224003953154715102625798599561576746593076228704448522848509650863715575134525964992439285085243915010868628145127710442853766119688772555932018349278733467937

#given the ciphertext
ciphertext = 4413233431418367729487001191499320110908628864393005850336194538378846901872012263024060279733910394528568658924541767014298273106072428208428621362441660742168169457839232452898840402021800460905562638079257404470183053387353849960252811956727755974787563684430128654542847575219444418360279725423441999278619584162289488016498634231451443666882615379215688913514242136494373656647328276909398980200846880640231426382657437148137610018777974884800967755913109702229247523206388812041488414941125272083962209616158810973532091497979384180936871075352614021504627549173686729322478688708849605857667792183339692021980


decrypted = pow(ciphertext, d, n)   ## decrypt
plaintext = int2string(decrypted)
print (plaintext) #prints out the decrypted message

# n = p * q
# print(n) #calculating the value of n

#calculating the value of x, needed for the formula for solving for d
x = (p-1) * (q-1)

#formula for calculating the value of d
#formula acquired from Rosseta Code, http://www.rosettacode.org/wiki/Rosetta_Code
def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m): #mod inverse
	g, x, y = extended_gcd(a, m)
	if g != 1:
		raise ValueError
	return x % m

d = modinv(e, x)
print(d) #calcualtes d

