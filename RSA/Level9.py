# Code taken from RSA.py file, on moodle.itb.ie page

import binascii

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16) #converting the string to integer

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8") #converting the integer back to the string

# given in the challenge
n1 = 1001191535967882284769094654562963158339094991366537360172618359025855097846977704928598237040115495676223744383629803332394884046043603063054821999994629411352862317941517957323746992871914047324555019615398720677218748535278252779545622933662625193622517947605928420931496443792865516592262228294965047903627
n2 = 405864605704280029572517043538873770190562953923346989456102827133294619540434679181357855400199671537151039095796094162418263148474324455458511633891792967156338297585653540910958574924436510557629146762715107527852413979916669819333765187674010542434580990241759130158992365304284892615408513239024879592309
n3 = 1204664380009414697639782865058772653140636684336678901863196025928054706723976869222235722439176825580211657044153004521482757717615318907205106770256270292154250168657084197056536811063984234635803887040926920542363612936352393496049379544437329226857538524494283148837536712608224655107228808472106636903723

c1 = 613757444204638278262310351562876531607487738717774407185252131147104492450160428757483976067628603514761619532764928239807564974590961450735755461481051283186240767490110455431475543041011912015289781128865893349142785039408178696523937605624371679605130950843591197358935516266254687080122972023592091964871
c2 = 22657108022478695797486965023447848250682406595690518779077232421899889165762724488153241456845951937121308084431913683848889272505486222688188138471999687468256556616878979818168438370975399291696045396880071048188564812795530986969364538462949239012254381251606438993964309325106863727351705595563360310007
c3 = 311096000497881387953904724284440481805457233048982756757007020410000443330941053703716829538086459727079448020579354693958905904778381820371160626001594619419169121166486655254993091181369105737797409452734836563374374511516011594235202125201067840325349354834604004321427713901643355933701994777952169157646

# calculated by multiplying n1 by n2 by n3
n = 489513212034244159522373855575985490948116427562019363666462271888834443520415314612563935365050888479488115714852128915010713037709107582272184258631019642702418995383469701632461455274225722192219147620841880978115137315695188798645869579223371513109233154697633459610859943164713442062583479201876214743627539703750357315859602503350180912560216771841713891410241432741695189944999931048523035096711278381230873496041984467115964380507485842515310145147399559869299854284180268775934960372781129108424826838564739485657970308637798031587295777274074413876138015470579251480670979664032694917067241231834657186444039930004087891123087076582753107274508904498940863609121593401360177595302127570108494478187961582005953154506325551498836136080666637659852012485151236181577663298828289288663388389421400949919014861952269478225376052860070327847322646757610513130400995321372680577324370919498947062501671603001110986009558189

# calculated using a formula in this code
N1 = 488930633598512057716753397639200023532439909612018310871138785924827345580282362107562797130436389426897334520862260087235403609801779998156470584492520906228915686751428752447396590497167339636497068017628421986221448613528487910681402822236261398121974921466460683757978790835704162605870290826764888322576180106970987607142914691494399892812335926343552887224650904770354889564388019756769542280332427522962825235476872530240411885894363403007973511452434660443200930061954096140462331100347711213999060205324505541099823401448916047146871109593067367958418813444050943261591970295550059534147672213334722324266407
N2 = 1206099780947422528084992257997299884243536527318129523842198600951754896680944357267099972777075331269493787233616585965464817327385787036022037815909802363734033055776997001999949386096682945358353672421027614337320920221822300505018011910453869458288560920608825725557429868344066495995150275390222145011530685171085202087642675154309795657375820876578370122083189109072523299251186047785864440813873019340172917305850484281760137457086681485258259629504955152992271940187581436157171158328597116476755080796338500995476964119054272854827643456197074200993380824188607151138686228753887293562784331386893155381503321
N3 = 406348207980067040753520014956048697826177271873769800925874477927201551546775534489626752994500769934875264253156046235496111766650633503413692358905671046085019222054221649185092129474070188581641592546230136412654528075451391490636840112632000329220852318177665875568607378115687219228467015830865876255626382370175437592942650206388054712985817330030955666412966622368991798746373023212484932892369091955593132612860217731276924562721956984921359378294364134954209831287186151021653444387440247182499153143804526047120771869164916893470916557520704442574110939593627510513366067302286342349504440207099894882404743

# calcualted using a formula in this code
x = 1443481700441074188271857272852443813926216319069591967858225025837042355121382053042981473326326348586430315975743426153092782442911798413009218220030491019058248554804666046383751795832449722333110978529146124626593311380669272264790798370364682647957792842936960619193452064525319281595117603992550293943276999357861545833260994722951787130368

# factorized x value
m = 11301526147910562593480172641704694161465423096780624709953790635636739226559722703113272085678800268554213086475832

# calculated using a formula in this code
d1 = 710472925461415051380512792826662965116488143990920915966470367290160674217275734368771658779755798347668810931302455821358456492042377903691195487826605312810296449312205315906636234229648720906572164488140533138190255216649308170413017342257074306404653615716376995368969585743984924069270036446356706619104
d2 = 289913218712778193374652976512544443793285645751626197712872737459634803383980193596240449137642338435386969437471958428138339411107231437256891912596894881621369614421634615226927575151585065541507365365611565800419025769619212559502221135580876668334112641687533367078449777693697823858443680912808715690869
d3 = 693961905939151984401525076738403504941894650071991578298442440329385449271588027579922813245934754471916769827355032948255802917750195532275347145865590710542404019400759581100755475182930921081585587471519107450465836223942029365107765643740417587736215117497226726127186842102330599443480532120276478262914

# used to calculate the value of n
# n = n1 * n2 * n3
# print(n)

# calculate N1, N2, N3 values
# N1 = n2 * n3
# N2 = n1 * n3
# N3 = n1 * n2

# calcualte the value of x and prints it out
# x = ((c1*N1*d1) + (c2*N2*d2) + (c3*N3*d3)) % n
# print(x)


# calculate d1, d2, d3 values
#formula acquired from Rosseta Code, http://www.rosettacode.org/wiki/Rosetta_Code
""""
def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m): # getting d value by inverting N1 by n1
	g, x, y = extended_gcd(a, m)
	if g != 1:
		raise ValueError
	return x % m

d = modinv(N3, n3) #using N and n values instead of e and x to solve for d
print(d) #calcualtes d"""


plaintext = int2string(m) #converting m to a string and printing it out
print (plaintext)

#Chinese Remainder Theorem (Gauss's algorithm)


